=== minikube安装
* 环境准备
** 2 CPUs 
** 2GB 内存
** 20GB 可用磁盘空间

.安装minikube
[source, bash]
----
mkdir /root/downloads
cd /root/downloads
curl -LO https://storage.googleapis.com/minikube/releases/latest/minikube-latest.x86_64.rpm
sudo rpm -Uvh minikube-latest.x86_64.rpm
----

.安装docker
[source, bash]
----
sudo yum install -y yum-utils
sudo yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo
sudo yum install docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin

sudo systemctl start docker
#运行hello-world image测试是否已经正确安装docker
sudo docker run hello-world
----

.终端输出
----
Hello from Docker!
This message shows that your installation appears to be working correctly.

To generate this message, Docker took the following steps:
 1. The Docker client contacted the Docker daemon.
 2. The Docker daemon pulled the "hello-world" image from the Docker Hub.
    (amd64)
 3. The Docker daemon created a new container from that image which runs the
    executable that produces the output you are currently reading.
 4. The Docker daemon streamed that output to the Docker client, which sent it
    to your terminal.

To try something more ambitious, you can run an Ubuntu container with:
 $ docker run -it ubuntu bash

Share images, automate workflows, and more with a free Docker ID:
 https://hub.docker.com/

For more examples and ideas, visit:
 https://docs.docker.com/get-started/
----
至此docker已经成功正确安装

[source, bash]
----
adduser czh 
passwd czh
echo 'czh   ALL=(ALL) ALL' >> /etc/sudoers
su czh
sudo usermod -aG docker $USER && newgrp docker

#使用docker driver启动集群:
minikube start --driver=docker
----

.终端输出
----
[czh@K8S-1 root]$ minikube start --driver=docker
😄  minikube v1.31.2 on Centos 9 (kvm/amd64)
✨  Using the docker driver based on user configuration
📌  Using Docker driver with root privileges
👍  Starting control plane node minikube in cluster minikube
🚜  Pulling base image ...
💾  Downloading Kubernetes v1.27.4 preload ...
    > preloaded-images-k8s-v18-v1...:  393.21 MiB / 393.21 MiB  100.00% 25.86 M
    > index.docker.io/kicbase/sta...:  447.62 MiB / 447.62 MiB  100.00% 3.98 Mi
❗  minikube was unable to download gcr.io/k8s-minikube/kicbase:v0.0.40, but successfully downloaded docker.io/kicbase/stable:v0.0.40 as a fallback image
🔥  Creating docker container (CPUs=2, Memory=2200MB) ...
🐳  Preparing Kubernetes v1.27.4 on Docker 24.0.4 ...
    ▪ Generating certificates and keys ...
    ▪ Booting up control plane ...
    ▪ Configuring RBAC rules ...
🔗  Configuring bridge CNI (Container Networking Interface) ...
🔎  Verifying Kubernetes components...
    ▪ Using image gcr.io/k8s-minikube/storage-provisioner:v5
🌟  Enabled addons: storage-provisioner, default-storageclass
💡  kubectl not found. If you need it, try: 'minikube kubectl -- get pods -A'
🏄  Done! kubectl is now configured to use "minikube" cluster and "default" namespace by default
----

[source, bash]
----
#设置docker为默认driver:
minikube config set driver docker


#添加kubectl仓库
cat <<EOF | sudo tee /etc/yum.repos.d/kubernetes.repo
[kubernetes]
name=Kubernetes
baseurl=https://pkgs.k8s.io/core:/stable:/v1.28/rpm/
enabled=1
gpgcheck=1
gpgkey=https://pkgs.k8s.io/core:/stable:/v1.28/rpm/repodata/repomd.xml.key
EOF

#安装kubectl
sudo yum install -y kubectl

#创建一个sample,并开放8080端口:
kubectl create deployment hello-minikube --image=kicbase/echo-server:1.0
kubectl expose deployment hello-minikube --type=NodePort --port=8080

#查看hello-minikube服务
kubectl get services hello-minikube

#使用minikube启动一个web browser
kubectl port-forward service/hello-minikube 7080:8080 --address 0.0.0.0
----

.终端输出
----
Forwarding from 0.0.0.0:7080 -> 8080
Handling connection for 7080
Handling connection for 7080
Handling connection for 7080

----

在另一个终端执行
[source, bash]
----
curl -I http://localhost:7080/
----

.终端输出
----
HTTP/1.1 200 OK
Content-Type: text/plain
Date: Thu, 02 Nov 2023 09:18:38 GMT
Content-Length: 131
----


浏览器访问http://搭建minikube的主机ip:7080/

image::minikube_install_01.png[]





