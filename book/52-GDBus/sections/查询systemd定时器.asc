=== 查询systemd定时器

==== 获取定时器对象路径

[source, bash]
----
gdbus call \
    --system \
    --dest org.freedesktop.systemd1 \
    --object-path /org/freedesktop/systemd1 \
    --method org.freedesktop.systemd1.Manager.GetUnit \
    systemd-tmpfiles-clean.timer
----

----
(objectpath '/org/freedesktop/systemd1/unit/systemd_2dtmpfiles_2dclean_2etimer',)
----

==== 查看对象结构

[source, bash]
----
gdbus introspect \
    --system \
    --dest org.freedesktop.systemd1 \
    --object-path /org/freedesktop/systemd1/unit/systemd_2dtmpfiles_2dclean_2etimer
----

----
node /org/freedesktop/systemd1/unit/systemd_2dtmpfiles_2dclean_2etimer {
  interface org.freedesktop.DBus.Peer {
    methods:
      Ping();
      GetMachineId(out s machine_uuid);
    signals:
    properties:
  };
  interface org.freedesktop.DBus.Introspectable {
    methods:
      Introspect(out s data);
    signals:
    properties:
  };
  interface org.freedesktop.DBus.Properties {
    methods:
      Get(in  s interface,
          in  s property,
          out v value);
      GetAll(in  s interface,
             out a{sv} properties);
      Set(in  s interface,
          in  s property,
          in  v value);
    signals:
      PropertiesChanged(s interface,
                        a{sv} changed_properties,
                        as invalidated_properties);
    properties:
  };
  interface org.freedesktop.systemd1.Timer {
    methods:
    signals:
    properties:
      @org.freedesktop.DBus.Property.EmitsChangedSignal("const")
      readonly s Unit = 'systemd-tmpfiles-clean.service';
      @org.freedesktop.DBus.Property.EmitsChangedSignal("invalidates")
      readonly a(stt) TimersMonotonic = [('OnUnitActiveUSec', 86400000000, 49682252232703), ('OnBootUSec', 900000000, 900000000)];
      @org.freedesktop.DBus.Property.EmitsChangedSignal("invalidates")
      readonly a(sst) TimersCalendar = [];
      readonly t NextElapseUSecRealtime = 0;
      readonly t NextElapseUSecMonotonic = 49682252232703;
      readonly t LastTriggerUSec = 1671107914243400;
      readonly t LastTriggerUSecMonotonic = 49595852231768;
      readonly s Result = 'success';
      @org.freedesktop.DBus.Property.EmitsChangedSignal("const")
      readonly t AccuracyUSec = 60000000;
      @org.freedesktop.DBus.Property.EmitsChangedSignal("const")
      readonly t RandomizedDelayUSec = 0;
      @org.freedesktop.DBus.Property.EmitsChangedSignal("const")
      readonly b Persistent = false;
      @org.freedesktop.DBus.Property.EmitsChangedSignal("const")
      readonly b WakeSystem = false;
  };
  interface org.freedesktop.systemd1.Unit {
    methods:
      @org.freedesktop.systemd1.Privileged("true")
      Start(in  s arg_0,
            out o arg_1);
      @org.freedesktop.systemd1.Privileged("true")
      Stop(in  s arg_0,
           out o arg_1);
      @org.freedesktop.systemd1.Privileged("true")
      Reload(in  s arg_0,
             out o arg_1);
      @org.freedesktop.systemd1.Privileged("true")
      Restart(in  s arg_0,
              out o arg_1);
      @org.freedesktop.systemd1.Privileged("true")
      TryRestart(in  s arg_0,
                 out o arg_1);
      @org.freedesktop.systemd1.Privileged("true")
      ReloadOrRestart(in  s arg_0,
                      out o arg_1);
      @org.freedesktop.systemd1.Privileged("true")
      ReloadOrTryRestart(in  s arg_0,
                         out o arg_1);
      @org.freedesktop.systemd1.Privileged("true")
      Kill(in  s arg_0,
           in  i arg_1);
      @org.freedesktop.systemd1.Privileged("true")
      ResetFailed();
      @org.freedesktop.systemd1.Privileged("true")
      SetProperties(in  b arg_0,
                    in  a(sv) arg_1);
    signals:
    properties:
      @org.freedesktop.DBus.Property.EmitsChangedSignal("const")
      readonly s Id = 'systemd-tmpfiles-clean.timer';
      @org.freedesktop.DBus.Property.EmitsChangedSignal("const")
      readonly as Names = ['systemd-tmpfiles-clean.timer'];
      @org.freedesktop.DBus.Property.EmitsChangedSignal("false")
      readonly s Following = '';
      @org.freedesktop.DBus.Property.EmitsChangedSignal("const")
      readonly as Requires = ['sysinit.target'];
      @org.freedesktop.DBus.Property.EmitsChangedSignal("const")
      readonly as RequiresOverridable = [];
      @org.freedesktop.DBus.Property.EmitsChangedSignal("const")
      readonly as Requisite = [];
      @org.freedesktop.DBus.Property.EmitsChangedSignal("const")
      readonly as RequisiteOverridable = [];
      @org.freedesktop.DBus.Property.EmitsChangedSignal("const")
      readonly as Wants = [];
      @org.freedesktop.DBus.Property.EmitsChangedSignal("const")
      readonly as BindsTo = [];
      @org.freedesktop.DBus.Property.EmitsChangedSignal("const")
      readonly as PartOf = [];
      @org.freedesktop.DBus.Property.EmitsChangedSignal("const")
      readonly as RequiredBy = [];
      @org.freedesktop.DBus.Property.EmitsChangedSignal("const")
      readonly as RequiredByOverridable = [];
      @org.freedesktop.DBus.Property.EmitsChangedSignal("const")
      readonly as WantedBy = ['timers.target'];
      @org.freedesktop.DBus.Property.EmitsChangedSignal("const")
      readonly as BoundBy = [];
      @org.freedesktop.DBus.Property.EmitsChangedSignal("const")
      readonly as ConsistsOf = [];
      @org.freedesktop.DBus.Property.EmitsChangedSignal("const")
      readonly as Conflicts = ['shutdown.target'];
      @org.freedesktop.DBus.Property.EmitsChangedSignal("const")
      readonly as ConflictedBy = [];
      @org.freedesktop.DBus.Property.EmitsChangedSignal("const")
      readonly as Before = ['timers.target', 'shutdown.target', 'systemd-tmpfiles-clean.service'];
      @org.freedesktop.DBus.Property.EmitsChangedSignal("const")
      readonly as After = ['sysinit.target'];
      @org.freedesktop.DBus.Property.EmitsChangedSignal("const")
      readonly as OnFailure = [];
      @org.freedesktop.DBus.Property.EmitsChangedSignal("const")
      readonly as Triggers = ['systemd-tmpfiles-clean.service'];
      @org.freedesktop.DBus.Property.EmitsChangedSignal("const")
      readonly as TriggeredBy = [];
      @org.freedesktop.DBus.Property.EmitsChangedSignal("const")
      readonly as PropagatesReloadTo = [];
      @org.freedesktop.DBus.Property.EmitsChangedSignal("const")
      readonly as ReloadPropagatedFrom = [];
      @org.freedesktop.DBus.Property.EmitsChangedSignal("const")
      readonly as JoinsNamespaceOf = [];
      @org.freedesktop.DBus.Property.EmitsChangedSignal("const")
      readonly as RequiresMountsFor = [];
      @org.freedesktop.DBus.Property.EmitsChangedSignal("const")
      readonly as Documentation = ['man:tmpfiles.d(5)', 'man:systemd-tmpfiles(8)'];
      @org.freedesktop.DBus.Property.EmitsChangedSignal("const")
      readonly s Description = 'Daily Cleanup of Temporary Directories';
      @org.freedesktop.DBus.Property.EmitsChangedSignal("const")
      readonly s LoadState = 'loaded';
      readonly s ActiveState = 'active';
      readonly s SubState = 'waiting';
      @org.freedesktop.DBus.Property.EmitsChangedSignal("const")
      readonly s FragmentPath = '/usr/lib/systemd/system/systemd-tmpfiles-clean.timer';
      @org.freedesktop.DBus.Property.EmitsChangedSignal("const")
      readonly s SourcePath = '';
      @org.freedesktop.DBus.Property.EmitsChangedSignal("const")
      readonly as DropInPaths = [];
      @org.freedesktop.DBus.Property.EmitsChangedSignal("false")
      readonly s UnitFileState = 'static';
      @org.freedesktop.DBus.Property.EmitsChangedSignal("false")
      readonly s UnitFilePreset = 'disabled';
      readonly t InactiveExitTimestamp = 1621512065994411;
      readonly t InactiveExitTimestampMonotonic = 3982778;
      readonly t ActiveEnterTimestamp = 1621512065994411;
      readonly t ActiveEnterTimestampMonotonic = 3982778;
      readonly t ActiveExitTimestamp = 0;
      readonly t ActiveExitTimestampMonotonic = 0;
      readonly t InactiveEnterTimestamp = 0;
      readonly t InactiveEnterTimestampMonotonic = 0;
      @org.freedesktop.DBus.Property.EmitsChangedSignal("const")
      readonly b CanStart = true;
      @org.freedesktop.DBus.Property.EmitsChangedSignal("const")
      readonly b CanStop = true;
      @org.freedesktop.DBus.Property.EmitsChangedSignal("const")
      readonly b CanReload = false;
      @org.freedesktop.DBus.Property.EmitsChangedSignal("const")
      readonly b CanIsolate = false;
      readonly (uo) Job = (0, '/');
      @org.freedesktop.DBus.Property.EmitsChangedSignal("const")
      readonly b StopWhenUnneeded = false;
      @org.freedesktop.DBus.Property.EmitsChangedSignal("const")
      readonly b RefuseManualStart = false;
      @org.freedesktop.DBus.Property.EmitsChangedSignal("const")
      readonly b RefuseManualStop = false;
      @org.freedesktop.DBus.Property.EmitsChangedSignal("const")
      readonly b AllowIsolate = false;
      @org.freedesktop.DBus.Property.EmitsChangedSignal("const")
      readonly b DefaultDependencies = true;
      @org.freedesktop.DBus.Property.EmitsChangedSignal("const")
      readonly s OnFailureJobMode = 'replace';
      @org.freedesktop.DBus.Property.EmitsChangedSignal("const")
      readonly b IgnoreOnIsolate = false;
      @org.freedesktop.DBus.Property.EmitsChangedSignal("const")
      readonly b IgnoreOnSnapshot = false;
      @org.freedesktop.DBus.Property.EmitsChangedSignal("const")
      readonly b NeedDaemonReload = false;
      @org.freedesktop.DBus.Property.EmitsChangedSignal("const")
      readonly t JobTimeoutUSec = 0;
      @org.freedesktop.DBus.Property.EmitsChangedSignal("const")
      readonly s JobTimeoutAction = 'none';
      @org.freedesktop.DBus.Property.EmitsChangedSignal("const")
      readonly s JobTimeoutRebootArgument = '';
      readonly b ConditionResult = true;
      readonly b AssertResult = true;
      readonly t ConditionTimestamp = 1621512065994401;
      readonly t ConditionTimestampMonotonic = 3982770;
      readonly t AssertTimestamp = 1621512065994403;
      readonly t AssertTimestampMonotonic = 3982770;
      @org.freedesktop.DBus.Property.EmitsChangedSignal("false")
      readonly a(sbbsi) Conditions = [];
      @org.freedesktop.DBus.Property.EmitsChangedSignal("false")
      readonly a(sbbsi) Asserts = [];
      @org.freedesktop.DBus.Property.EmitsChangedSignal("const")
      readonly (ss) LoadError = ('', '');
      @org.freedesktop.DBus.Property.EmitsChangedSignal("const")
      readonly b Transient = false;
  };
};
----

==== 获取对象的定时器相关属性

[source, bash]
----
gdbus call \
    --system \
    --dest org.freedesktop.systemd1 \
    --object-path /org/freedesktop/systemd1/unit/systemd_2dtmpfiles_2dclean_2etimer \
    --method org.freedesktop.DBus.Properties.GetAll \
    org.freedesktop.systemd1.Timer
----

----
({
    'Unit': <'systemd-tmpfiles-clean.service'>, 
    'TimersMonotonic': <[
        ('OnUnitActiveUSec', uint64 86400000000, uint64 49682252232703),
        ('OnBootUSec', 900000000, 900000000)
    ]>, 
    'TimersCalendar': <@a(sst) []>, 
    'NextElapseUSecRealtime': <uint64 0>, 
    'NextElapseUSecMonotonic': <uint64 49682252232703>, 
    'LastTriggerUSec': <uint64 1671107914243400>, 
    'LastTriggerUSecMonotonic': <uint64 49595852231768>, 
    'Result': <'success'>, 
    'AccuracyUSec': <uint64 60000000>, 
    'RandomizedDelayUSec': <uint64 0>, 
    'Persistent': <false>, 
    'WakeSystem': <false>
},)
----

==== 获取对象定时器上次运行结果

[source, bash]
----
gdbus call \
    --system \
    --dest org.freedesktop.systemd1 \
    --object-path /org/freedesktop/systemd1/unit/systemd_2dtmpfiles_2dclean_2etimer \
    --method org.freedesktop.DBus.Properties.Get \
    org.freedesktop.systemd1.Timer Result
----

----
(<'success'>,)
----
