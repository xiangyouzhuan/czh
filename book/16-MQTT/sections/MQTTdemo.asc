=== MQTTdemo
[source, bash]
pip install paho-mqtt

该demo本人运行在centos stream 9

安装mosquitto(MQTT的broker)
[source, bash]
----
yum install mosquitto
systemctl status mosquitto.service

cat <<EOF >>/etc/mosquitto/mosquitto.conf
allow_anonymous 
listener 1883 0.0.0.0
EOF

systemctl restart mosquitto.service
----

在一个终端subscribe
[source, bash]
mosquitto_sub -t 'test/topic' -v

在另一个终端publish
[source, bash]
mosquitto_pub -t 'test/topic' -m 'hello world'

.在执行subscribe的终端输出
----
[root@master ~]# mosquitto_sub -t 'test/topic' -v
test/topic hello world
----
出现以上内容则mosquitto搭建成功


subscribe.py
----
# python3.6

import random

from paho.mqtt import client as mqtt_client


#broker = 'broker.emqx.io'
broker = '192.168.122.254'
port = 1883
topic = "python/mqtt"
# Generate a Client ID with the subscribe prefix.
client_id = f'subscribe-{random.randint(0, 100)}'
# username = 'emqx'
# password = 'public'


def connect_mqtt() -> mqtt_client:
    def on_connect(client, userdata, flags, rc):
        if rc == 0:
            print("Connected to MQTT Broker!")
        else:
            print("Failed to connect, return code %d\n", rc)

    client = mqtt_client.Client(client_id)
    # client.username_pw_set(username, password)
    client.on_connect = on_connect
    client.connect(broker, port)
    return client


def subscribe(client: mqtt_client):
    def on_message(client, userdata, msg):
        print(f"Received `{msg.payload.decode()}` from `{msg.topic}` topic")

    client.subscribe(topic)
    client.on_message = on_message


def run():
    client = connect_mqtt()
    subscribe(client)
    client.loop_forever()



if __name__ == '__main__':
    run()

----

publish.py
----
# python 3.6

import random
import time

from paho.mqtt import client as mqtt_client

#broker = 'broker.emqx.io'
broker = '192.168.122.254'
port = 1883
topic = "python/mqtt"
# Generate a Client ID with the publish prefix.
client_id = f'publish-{random.randint(0, 1000)}'
# username = 'emqx'
# password = 'public'

def connect_mqtt():
    def on_connect(client, userdata, flags, rc):
        if rc == 0:
            print("Connected to MQTT Broker!")
        else:
            print("Failed to connect, return code %d\n", rc)

    client = mqtt_client.Client(client_id)
    # client.username_pw_set(username, password)
    client.on_connect = on_connect
    client.connect(broker, port)
    return client


def publish(client):
    msg_count = 1
    while True:
        time.sleep(1)
        msg = f"messages: {msg_count}"
        result = client.publish(topic, msg)
        # result: [0, 1]
        status = result[0]
        if status == 0:
            print(f"Send `{msg}` to topic `{topic}`")
        else:
            print(f"Failed to send message to topic {topic}")
        msg_count += 1
        if msg_count > 5:
            break


def run():
    client = connect_mqtt()
    client.loop_start()
    publish(client)
    client.loop_stop()


if __name__ == '__main__':
    run()

----



