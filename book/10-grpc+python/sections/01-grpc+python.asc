=== 快速开始

==== 环境准备
[NOTE]
以下命令匀在root下执行

[TIP]
 `python -m ensurepip` 
检查当前Python环境中是否已经安装了pip。如果没有安装，则会自动下载并安装最新版本的pip

更新pip版本
[source, bash]
python -m pip install --upgrade pip

==== 安装gRPC
[source, bash]
python -m pip install grpcio

==== gRPC tools
[source, bash]
python -m pip install grpcio-tools

==== 下载example
[source, bash]
----
git clone -b v1.57.0 --depth 1 --shallow-submodules https://github.com/grpc/grpc
cd grpc/examples/python/helloworld
----

==== 运行 gRPC 应用
进入 `examples/python/helloworld` 目录

1.运行server
[source, bash]
python greeter_server.py

.终端输出
----
[root@gitserver helloworld]# python greeter_server.py
Server started, listening on 50051
----

2.在另一个终端同一目录下运行client
[source, bash]
python greeter_client.py

.终端输出
----
[root@gitserver helloworld]# python greeter_client.py
Will try to greet world ...
Greeter client received: Hello, you!
----

==== 更新gRPC service
[source, bash]
vim examples/protos/helloworld.proto

添加
`// Sends another greeting
  rpc SayHelloAgain (HelloRequest) returns (HelloReply) {}`
到下列文字标识处

----
// The greeting service definition.
service Greeter {
  // Sends a greeting
  rpc SayHello (HelloRequest) returns (HelloReply) {}

  *添加到此处*

  //rpc SayHelloStreamReply (HelloRequest) returns (stream HelloReply) {}
}
----
添加后变成

----
// The greeting service definition.
service Greeter {
  // Sends a greeting
  rpc SayHello (HelloRequest) returns (HelloReply) {}

  // Sends another greeting
  rpc SayHelloAgain (HelloRequest) returns (HelloReply) {}

  //rpc SayHelloStreamReply (HelloRequest) returns (stream HelloReply) {}
}
----

==== 生成gRPC代码
进入 `examples/python/helloworld` 目录，执行下列命令
[source, bash]
python -m grpc_tools.protoc -I../../protos --python_out=. --pyi_out=. --grpc_python_out=. ../../protos/helloworld.proto

==== 更新并运行该应用
1.更新server
在相同目录下，编辑greeter_server.py
[source, bash]
vim greeter_server.py

----
class Greeter(helloworld_pb2_grpc.GreeterServicer):

  def SayHello(self, request, context):
    return helloworld_pb2.HelloReply(message=f'Hello, {request.name}!')

  def SayHelloAgain(self, request, context):
    return helloworld_pb2.HelloReply(message=f'Hello again, {request.name}!')
...
----

在上面代码中，已经添加了下面这段代码
----
  def SayHelloAgain(self, request, context):
    return helloworld_pb2.HelloReply(message=f'Hello again, {request.name}!')
----


2.更新client
在相同目录下，编辑greeter_client.py
[source, bash]
vim greeter_client.py

----
def run():
    with grpc.insecure_channel('localhost:50051') as channel:
        stub = helloworld_pb2_grpc.GreeterStub(channel)
        response = stub.SayHello(helloworld_pb2.HelloRequest(name='you'))
        print("Greeter client received: " + response.message)
        response = stub.SayHelloAgain(helloworld_pb2.HelloRequest(name='you'))
        print("Greeter client received: " + response.message)
----

上面代码中，已经添加了下面这段代码
----
        response = stub.SayHelloAgain(helloworld_pb2.HelloRequest(name='you'))
        print("Greeter client received: " + response.message)
----

3.运行

到 `examples/python/helloworld` 这个目录下

(1)运行server
[source, bash]
python greeter_server.py

.终端输出
----
[root@gitserver helloworld]# python greeter_server.py
Server started, listening on 50051

----

在另一个终端中的相同目录下

(2)运行client
[source, bash]
python greeter_client.py

.终端输出
----
[root@gitserver helloworld]# python greeter_client.py
Will try to greet world ...
Greeter client received: Hello, you!
Greeter client received: Hello again, you!

----
















