=== rustup

官方文档::
    https://rust-lang.github.io/rustup/[The rustup book]

==== rustup参数

IMPORTANT: `pacman` 方式安装的 `rustup` 不能使用 `rustup self update` 更新 `rustup`。只能通过 `pacman` 更新。

`rustup -h` 帮助信息：

[source, console]
----
rustup 1.23.1 (2020-12-18)
The Rust toolchain installer

USAGE:
    rustup [FLAGS] [+toolchain] <SUBCOMMAND>

FLAGS:
    -v, --verbose    Enable verbose output
    -q, --quiet      Disable progress output
    -h, --help       Prints help information
    -V, --version    Prints version information

ARGS:
    <+toolchain>    release channel (e.g. +stable) or custom toolchain to set override

SUBCOMMANDS:
    show           Show the active and installed toolchains or profiles
    update         Update Rust toolchains and rustup
    check          Check for updates to Rust toolchains
    default        Set the default toolchain
    toolchain      Modify or query the installed toolchains
    target         Modify a toolchain's supported targets
    component      Modify a toolchain's installed components
    override       Modify directory toolchain overrides
    run            Run a command with an environment configured for a given toolchain
    which          Display which binary will be run for a given command
    doc            Open the documentation for the current toolchain
    man            View the man page for a given command
    self           Modify the rustup installation
    set            Alter rustup settings
    completions    Generate tab-completion scripts for your shell
    help           Prints this message or the help of the given subcommand(s)

DISCUSSION:
    rustup installs The Rust Programming Language from the official
    release channels, enabling you to easily switch between stable,
    beta, and nightly compilers and keep them updated. It makes
    cross-compiling simpler with binary builds of the standard library
    for common platforms.

    If you are new to Rust consider running `rustup doc --book` to
    learn Rust.
----

`rustup toolchain  -h` 帮助信息：

[source, console]
----
rustup-toolchain 
Modify or query the installed toolchains

USAGE:
    rustup toolchain <SUBCOMMAND>

FLAGS:
    -h, --help    Prints help information

SUBCOMMANDS:
    list         List installed toolchains
    install      Install or update a given toolchain
    uninstall    Uninstall a toolchain
    link         Create a custom toolchain by symlinking to a directory
    help         Prints this message or the help of the given subcommand(s)

DISCUSSION:
    Many `rustup` commands deal with *toolchains*, a single
    installation of the Rust compiler. `rustup` supports multiple
    types of toolchains. The most basic track the official release
    channels: 'stable', 'beta' and 'nightly'; but `rustup` can also
    install toolchains from the official archives, for alternate host
    platforms, and from local builds.

    Standard release channel toolchain names have the following form:

        <channel>[-<date>][-<host>]

        <channel>       = stable|beta|nightly|<major.minor>|<major.minor.patch>
        <date>          = YYYY-MM-DD
        <host>          = <target-triple>

    'channel' is a named release channel, a major and minor version
    number such as `1.42`, or a fully specified version number, such
    as `1.42.0`. Channel names can be optionally appended with an
    archive date, as in `nightly-2014-12-18`, in which case the
    toolchain is downloaded from the archive for that date.

    The host may be specified as a target triple. This is most useful
    for installing a 32-bit compiler on a 64-bit platform, or for
    installing the [MSVC-based toolchain] on Windows. For example:

        $ rustup toolchain install stable-x86_64-pc-windows-msvc

    For convenience, omitted elements of the target triple will be
    inferred, so the above could be written:

        $ rustup toolchain install stable-msvc

    The `rustup default` command may be used to both install and set
    the desired toolchain as default in a single command:

        $ rustup default stable-msvc

    rustup can also manage symlinked local toolchain builds, which are
    often used for developing Rust itself. For more information see
    `rustup toolchain help link`.
----

==== rustup源设置

[source, bash]
----
export RUSTUP_DIST_SERVER=https://mirrors.tuna.tsinghua.edu.cn/rustup
echo 'export RUSTUP_DIST_SERVER=https://mirrors.tuna.tsinghua.edu.cn/rustup' >> ~/.bash_profile
----

==== rustup实践

用默认浏览器打开 `"The Rust Programming Language"` 文档：

[source, bash]
rustup doc --book

安装工具链：

[source, bash]
rustup install stable

或

[source, bash]
rustup toolchain install stable

设置默认工具链：

[source, bash]
rustup default stable

查询当前安装的工具链：

[source, bash]
rustup toolchain list

移除指定的工具链：

[source, bash]
rustup toolchain uninstall 1.48-x86_64-unknown-linux-gnu

更新工具链：

[source, bash]
rustup update


==== FAQ

===== `rustup doc --book` 执行无响应

执行 `rustup doc --book` 通过默认浏览器查看离线文档，命令返回值为0(正常)，浏览器未打开文档。

    $ rustup doc --help
    rustup-doc 
    Open the documentation for the current toolchain
    ......


问题分析：

1. 用 `strace -o output.log -f rustup doc --book` 跟踪系统调用和信号，输出日志到文件 `output.log`；

2. 分析日志最后报错信息 `killed by SIGSEGV (core dumped)`，向上跟踪看到 `baidunetdi:sh3` 字样，猜测是百度网盘应用被设置成了默认MIME的应用；

    23318 statx(AT_FDCWD, "/home/lyuqiang/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/share/doc/rust/html/book/index.html", AT_STATX_SYNC_AS_STAT|AT_SYMLINK_NOFOLLOW|AT_NO_AUTOMOUNT, STATX_ALL, {stx_mask=STATX_ALL|STATX_MNT_ID, stx_attributes=0, stx_mode=S_IFREG|0644, stx_size=27034, ...}) = 0
    23318 openat(AT_FDCWD, "/home/lyuqiang/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/share/doc/rust/html/book/index.html", O_RDONLY|O_NOATIME) = 8
    23318 read(8, "<!DOCTYPE HTML>\n<html lang=\"en\" "..., 4096) = 4096
    23318 close(8)                          = 0
    ......
    ......
    ......
    ......
    23315 openat(AT_FDCWD, "/usr/share/applications/baidunetdisk.desktop", O_RDONLY) = 8
    23315 newfstatat(8, "", {st_mode=S_IFREG|0664, st_size=252, ...}, AT_EMPTY_PATH) = 0
    23315 read(8, "[Desktop Entry]\nName=baidunetdis"..., 4096) = 252
    23315 read(8, "", 4096)                 = 0
    23315 close(8)                          = 0
    23315 access("/usr/lib/baidunetdisk/baidunetdisk", X_OK) = 0
    23315 getuid()                          = 1000
    23315 newfstatat(AT_FDCWD, "/usr/lib/baidunetdisk/baidunetdisk", {st_mode=S_IFREG|0755, st_size=129796744, ...}, 0) = 0
    23315 openat(AT_FDCWD, "/usr/share/locale/locale.alias", O_RDONLY) = 8
    23315 newfstatat(8, "", {st_mode=S_IFREG|0644, st_size=2998, ...}, AT_EMPTY_PATH) = 0
    23315 read(8, "# Locale name alias data base.\n#"..., 4096) = 2998
    ......
    ......
    23473 prctl(PR_SET_NAME, "baidunetdi:sh3" <unfinished ...>
    ......
    ......
    23443 +++ killed by SIGSEGV (core dumped) +++
    23447 +++ killed by SIGSEGV (core dumped) +++
    23449 +++ killed by SIGSEGV (core dumped) +++
    23446 +++ killed by SIGSEGV (core dumped) +++
    23451 +++ killed by SIGSEGV (core dumped) +++
    23445 +++ killed by SIGSEGV (core dumped) +++

3. 确认 `text/html` 的MIME设置，确实 `baidunetdisk.desktop` 是默认设置；

    $ gio mime text/html
    用于“text/html”的默认应用程序：baidunetdisk.desktop
    已注册的应用程序：
        google-chrome.desktop
        firefox.desktop
        calibre-ebook-edit.desktop
        org.gnome.Epiphany.desktop
        org.gnome.gedit.desktop
        code-oss.desktop
        aegisub.desktop
        vim.desktop
    推荐的应用程序：
        google-chrome.desktop
        firefox.desktop
        calibre-ebook-edit.desktop
        org.gnome.Epiphany.desktop

4. 执行命令 `gio mime text/html google-chrome.desktop` 重置MIME设置；

    $ gio mime text/html google-chrome.desktop
    Set google-chrome.desktop as the default for text/html

5. 重新确认MIME设置；

    $ gio mime text/html
    用于“text/html”的默认应用程序：google-chrome.desktop
    已注册的应用程序：
        google-chrome.desktop
        firefox.desktop
        calibre-ebook-edit.desktop
        org.gnome.Epiphany.desktop
        org.gnome.gedit.desktop
        code-oss.desktop
        aegisub.desktop
        vim.desktop
    推荐的应用程序：
        google-chrome.desktop
        firefox.desktop
        calibre-ebook-edit.desktop
        org.gnome.Epiphany.desktop

OK，`rustup doc --book` 可以看离线文档了。

