=== RabbiMQ使用

==== RabbitMQ cli 

rabbitmqctl consume my_queue
rabbitmqctl publish my_queue "Hello World!"


==== python

.环境准备
[source, bash]
pip3 install pika

.receive.py脚本文件
[source, bash]
----
cat << EOF > receive.py
import pika

credentials = pika.PlainCredentials('myuser','2a55f70a841f18b97c3a7db939b7adc9e34a0f1b')
connection = pika.BlockingConnection(pika.ConnectionParameters(
    'localhost',5672,'qa1',credentials))
channel = connection.channel()

# You may ask why we declare the queue again ‒ we have already declared it in our previous code.
# We could avoid that if we were sure that the queue already exists. For example if send.py program
# was run before. But we're not yet sure which program to run first. In such cases it's a good
# practice to repeat declaring the queue in both programs.
channel.queue_declare(queue='balance')


def callback(ch, method, properties, body):
    print(" [x] Received %r" % body)


channel.basic_consume(queue='balance',
                      auto_ack=False,
                      on_message_callback=callback)

print(' [*] Waiting for messages. To exit press CTRL+C')
channel.start_consuming()

EOF
----
.send.py脚本文件
[source, bash]
----
cat << EOF > send.py
# !/usr/bin/env python
import pika
credentials = pika.PlainCredentials('admin','123456')
connection = pika.BlockingConnection(pika.ConnectionParameters(
    '192.168.122.241',5672,'qa1',credentials))
channel = connection.channel()

# 声明queue
channel.queue_declare(queue='balance')

# n RabbitMQ a message can never be sent directly to the queue, it always needs to go through an exchange.
channel.basic_publish(exchange='',
                      routing_key='balance',
                      body='Hello World!')
print(" [x] Sent 'Hello World!'")'ACCESS_REFUSED - Login was refused using authentication mechanism PLAIN
connection.close()
EOF
----

.执行receive.py
[source, bash]
python3 receive.py

.终端输出
----
[*] Waiting for messages. To exit press CTRL+C
----


打开另一个终端

.执行send.py
[source, bash]
python3 send.py

.终端输出
----
 [x] Sent 'Hello World!'
----

回到执行receive.py的终端，可看到
----
[*] Waiting for messages. To exit press CTRL+C
[x] Received b'Hello World!'
----
