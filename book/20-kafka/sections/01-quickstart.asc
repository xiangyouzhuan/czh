=== quickstart

==== 环境准备

[NOTE]
本地环境必须安装Java 8+

.安装java17 
[source, bash]
----
[root@dlp ~]# dnf -y install java-17-openjdk java-17-openjdk-devel

[root@dlp ~]# cat > /etc/profile.d/java.sh <<'EOF'
export JAVA_HOME=$(dirname $(dirname $(readlink $(readlink $(which java)))))
export PATH=$PATH:$JAVA_HOME/bin
EOF

[root@dlp ~]# source /etc/profile.d/java.sh

[root@dlp ~]# java --version
openjdk 17.0.3 2022-04-19 LTS
OpenJDK Runtime Environment 21.9 (build 17.0.3+7-LTS)
OpenJDK 64-Bit Server VM 21.9 (build 17.0.3+7-LTS, mixed mode, sharing)

# verify to create test program
[root@dlp ~]# cat > java_test.java <<'EOF'
class java_test {
    public static void main(String[] args) {
        System.out.println("Hello Java World !");
    }
}
EOF 

[root@dlp ~]# javac java_test.java
[root@dlp ~]# java java_test
Hello Java World !

----
如果您从CentOS官方存储库安装了多个版本的Java，则可以使用 `alternatives` 来切换它们。
[source, bash]
----
[root@dlp ~]# alternatives --config java

There are 3 programs which provide 'java'.

  Selection    Command
-----------------------------------------------
   1           java-1.8.0-openjdk.x86_64 (/usr/lib/jvm/java-1.8.0-openjdk-1.8.0.332.b09-1.el9.x86_64/jre/bin/java)
*+ 2           java-11-openjdk.x86_64 (/usr/lib/jvm/java-11-openjdk-11.0.15.0.10-1.el9.x86_64/bin/java)
   3           java-17-openjdk.x86_64 (/usr/lib/jvm/java-17-openjdk-17.0.3.0.7-1.el9.x86_64/bin/java)

Enter to keep the current selection[+], or type selection number: 3

[root@dlp ~]# alternatives --config javac

There are 3 programs which provide 'javac'.

  Selection    Command
-----------------------------------------------
   1           java-1.8.0-openjdk.x86_64 (/usr/lib/jvm/java-1.8.0-openjdk-1.8.0.332.b09-1.el9.x86_64/bin/javac)
*+ 2           java-11-openjdk.x86_64 (/usr/lib/jvm/java-11-openjdk-11.0.15.0.10-1.el9.x86_64/bin/javac)
   3           java-17-openjdk.x86_64 (/usr/lib/jvm/java-17-openjdk-17.0.3.0.7-1.el9.x86_64/bin/javac)

Enter to keep the current selection[+], or type selection number: 3

[root@dlp ~]# java --version
openjdk 17.0.3 2022-04-19 LTS
OpenJDK Runtime Environment 21.9 (build 17.0.3+7-LTS)
OpenJDK 64-Bit Server VM 21.9 (build 17.0.3+7-LTS, mixed mode, sharing)
[root@dlp ~]# javac --version
javac 17.0.3
----

==== 1.下载KAFKA
下载新的KAFKA发行版并解压
[source ,bash]
----
wget https://dlcdn.apache.org/kafka/3.5.0/kafka_2.13-3.5.0.tgz
tar xf kafka_2.13-3.5.0.tgz
cd kafka_2.13-3.5.0
----

==== 2.启动KAFKA环境





为了使zookeeper和Kafka broker服务管理更方便，将它们添加至系统服务
[source, bash]
----
cat <<EOF > /etc/systemd/system/zookeeper.service
[Unit]
Description=ZooKeeper Server
After=network.target
before=kafka.service

[Service]
User=root
ExecStart=/root/kafka_2.13-3.5.0/bin/zookeeper-server-start.sh /root/kafka_2.13-3.5.0/config/zookeeper.properties
WorkingDirectory=/root/kafka_2.13-3.5.0

[Install]
WantedBy=multi-user.target
EOF
----

[source, bash]
----
cat <<EOF > /etc/systemd/system/kafka.service
[Unit]
Description=Kafka Server
After=network.target zookeeper.service

[Service]
User=root
ExecStart=/root/kafka_2.13-3.5.0/bin/kafka-server-start.sh /root/kafka_2.13-3.5.0/config/server.properties
WorkingDirectory=/root/kafka_2.13-3.5.0

[Install]
WantedBy=multi-user.target
EOF
----

.启动ZooKeeper服务
[source ,bash]
----
#设置开机自启动
systemctl enable zookeeper
#启动ZooKeeper服务
systemctl start zookeeper
#查看ZooKeeper服务
systemctl status zookeeper
----
.启动Kafka broker服务
[source ,bash]
----
#设置开机自启动
systemctl enable kafka
#启动kafka服务
systemctl start kafka
#查看kafka服务
systemctl status kafka
----

==== 3.创建一个topic用来存储事件
在写第一个事件之前，必须创建一个topic。

打开另一个终端

.创建一个topic
[source ,bash]
bin/kafka-topics.sh --create --topic quickstart-events --bootstrap-server localhost:9092

==== 4.往该topic中写入事件
.使用producer
[source ,bash]
----
bin/kafka-console-producer.sh --topic quickstart-events --bootstrap-server localhost:9092
This is my first event
This is my second event
----
你可以在任何时候使用 `Ctrl-C` 关闭producer客户端

==== 5.读事件
.再开一个终端，执行
[source ,bash]
----
bin/kafka-console-consumer.sh --topic quickstart-events --from-beginning --bootstrap-server localhost:9092
This is my first event
This is my second event
----

使用 `Ctrl-C` 可终止程序

==== 6.用KAFKA CONNNECT将数据导入/导出成事件流

Kafka Connect允许你不断地从外部系统摄取数据到Kafka
在这个快速入门中，我们将看到如何使用简单的连接器来运行Kafka Connect，将数据从文件导入到Kafka topic，并将数据从Kafka topic导出到文件。

.在文件config/connect-standalone.properties中添加配置属性
[source, bash]
echo "plugin.path=libs/connect-file-3.5.0.jar">>config/connect-standalone.properties


.添加测试的数据
[source, bash]
echo -e "foo\nbar" > test.txt

.启动以独立模式运行的两个连接器
[source, bash]
bin/connect-standalone.sh config/connect-standalone.properties config/connect-file-source.properties config/connect-file-sink.properties


新开一个终端

.查看test.sink.txt文件内容
[source, bash]
----
more test.sink.txt
foo
bar
----


[NOTE]
数据被存储在Kafka的topic：connect-test中，所以我们也可以运行一个console-consumer来查看主题中的数据(或者使用自定义consumer代码来处理它):

.运行console-consumer查看connect-test中数据
[source, bash]
----
bin/kafka-console-consumer.sh --bootstrap-server localhost:9092 --topic connect-test --from-beginning
{"schema":{"type":"string","optional":false},"payload":"foo"}
{"schema":{"type":"string","optional":false},"payload":"bar"}
...
----

此时connector继续处理数据，因此我们可以将数据添加到文件中，并看到它在管道中移动:

打开一个新终端

.添加数据到文件中
[source, bash]
----
echo Another line >> test.txt
----

现在你应该看到这一行出现在console consumer 的输出和test.sink.txt文件中。


==== 常用命令
.增加kafka topic quickstart-events
[source, bash]
bin/kafka-topics.sh --create --topic quickstart-events --bootstrap-server localhost:9092

.kafka命令行发消息：
[source, bash]
bin/kafka-console-producer.sh --topic quickstart-events --bootstrap-server localhost:9092
This is my first event
This is my second event

.kafka命令行收消息：
[source, bash]
bin/kafka-console-consumer.sh --topic quickstart-events --from-beginning --bootstrap-server localhost:9092


.删除kafka topic quickstart-events
[source, bash]
bin/kafka-topics.sh --delete --topic quickstart-events --bootstrap-server localhost:9092

.查看kafka quickstart-events详情
[source, bash]
bin/kafka-topics.sh --describe --topic quickstart-events --bootstrap-server localhost:9092

.查看kafka topic列表
[source, bash]
bin/kafka-topics.sh --list --bootstrap-server localhost:9092


.查看topic中数据
[source, bash]
bin/kafka-console-consumer.sh --bootstrap-server localhost:9092 --topic connect-test --from-beginning







